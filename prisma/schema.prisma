
generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// You may want a User model as well for relations:
model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  jobs          Job[] // Relation field for jobs posted by the user
  applications  Application[]
}

model Job {
  id           String        @id @default(cuid())
  title        String
  description  String
  company      String
  location     String
  type         String
  salary       Float?
  postedAt     DateTime      @default(now())
  postedById   String
  postedBy     User          @relation(fields: [postedById], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id                  String   @id @default(cuid())
  userId              String
  jobId               String
  coverLetter         String
  phoneNumber         String
  status              String?
  linkedin            String?
  github              String?
  portfolio           String?
  resumeUrl           String? // URL to access the resume
  resumeFile          Bytes? // Actual PDF binary data
  resumeFileName      String? // Original filename
  resumeFileType      String? // MIME type (e.g., "application/pdf")
  isDeletedByUser     Boolean  @default(false)
  isDeletedByEmployer Boolean  @default(false)
  appliedAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])
}
